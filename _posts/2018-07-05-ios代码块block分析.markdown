---
layout: post
title:  "ios代码块block分析 "
date:  2018-07-05 16:09:06 +0800
categories: none
---
> 近来，在项目中遇到一些block的问题，所以闲来写一些关于block的事项    

![](/images/2018-07-05-16-08-09.jpg)

代码块Block是苹果在iOS4开始引入的对C语言的扩展,用来实现匿名函数的特性,Block是一种特殊的数据类型,其可以正常定义变量、作为参数、作为返回值,特殊地,Block还可以保存一段代码,在需要的时候调用,目前Block已经广泛应用于iOS开发中,常用于GCD、动画、排序及各类回调
 Block的声明和赋值只是保存了一段代码段，必须调用才能执行代码块。      

#1、关于Block变量的声明、赋值和调用  
##1.1、Block变量的声明
```objc    
//Block变量的声明各式为：返回值类型(^Block名字)(参数列表)    
void(^aBlock)(NSString *x, NSString *y);
void(^aBlock)(NSString *, NSString *);
```
##1.2、Block变量的赋值
```objc
//Block变量赋值的各式为：Block变量 = ^(参数列表){函数体}    
aBlock = ^(NSString *x, NSString *y){
    NSLog(@"%@love%@",x, y);
};
```
##1.3、Block变量的声明并赋值     
```objc
int(^myBlock)(int) = ^(int num) {
    return num*7;
};
//如果没有参数列表，在赋值的时候参数列表可以省略
void(^aVoidBlock)() = ^{
    NSLog(@"I am a aVoidBlock");
};
```
##1.4、Block变量的调用
```objc
aBlock(@"zhujinchi", @"zhujinchi");
NSLog(@"%d", myBlock(9));
aVoidBlock();
```    

#2、使用typedef定义Block类型   
* 在实际使用Block的过程中,我们可能需要重复地声明多个相同返回值相同参数列表的Block变量,如果总是重复地编写一长串代码来声明变量会非常繁琐,所以我们可以使用typedef来定义Block类型    
```objc    
typedef void(^SayHello)();
SayHello hello = ^(){
    NSLog(@"hello");
};
hello();
```    

#3、Block作为函数参数   
##3.1、Block作为C函数参数
```c    
void useBlockForC(int(^aBlock)(int, int)) {
    printf("%d", aBlock(300, 200));
};
//调用方法以Block作为函数参数
int (^addBlock)(int, int) = ^(int x, int y){
    return x+y;
};
useBlockForC(addBlock);
//效果和上述相同
useBlockForC(^(int x, int y)) {
    return x+y;
};
```    
##3.2、Block作为OC函数参数
```objc
-(void)useBlockForOC:(int (^)(int x, int y))aBlock {
    NSLog(@"%d", aBlock(300, 200));
};
//调用方法以Block作为函数参数
int (^addBlock)(int, int) = ^(int x, int y){
    return x+y;
};
[self useBlockForOC:addBlock];
//效果和上述相同
[self useBlockForOC:^(int x, int y)] {
    return x+y;
};
```    
##3.3、使用typedef简化Block
```objc
typedef int(^MyBlock)(int x, int y);
-(void)useBlockForOC:(MyBlock)aBlock {
    NSLog(@"%@", aBlock(300, 200));
};
//
MyBlock addBlock = ^(int x, int y) {
    return x+y;
}
[self useBlockForOC:addBlock];
//
[self useBlockForOC:^(int x, int y) {
    return x+y;
};];
```
#4、Block内访问局部变量
![](/images/2018-07-09-09-35-16.png)
* block中，可以访问局部变量。
* 执行block的时候，访问到的局部变量的值，是声明block之前局部变量的值。
* block中不能修改局部变量。
我们用clang命令将OC转为C++代码查看一下block底层实现。 

![](/images/2018-07-09-10-20-38.png)
```objc
struct __main_block_impl_0 {
  struct __block_impl impl;
  struct __main_block_desc_0* Desc;
  int global;
  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int _global, int flags=0) : global(_global) {
    impl.isa = &_NSConcreteStackBlock;
    impl.Flags = flags;
    impl.FuncPtr = fp;
    Desc = desc;
  }
};
```
main_block_impl_0如上，可见，在声明block的时候，

#5、Block内访问__block修饰的局部变量

#6、Block内访问全局变量

#7、Block内访问静态变量

#8、Block在MRC及ARC下的内存管理

#9、使用Block进行排序



