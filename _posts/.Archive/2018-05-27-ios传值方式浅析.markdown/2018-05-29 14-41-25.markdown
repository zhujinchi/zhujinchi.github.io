---
layout: post
title:  "ios传值方式浅析"
date:   2018-05-27 21:35:38 10:11:26 +0800
categories: ios
---
>最近在写一些关于页面间传值代码，所以在这里把一些ios传值方式汇总一下。  
场景控制：A页面传值`flag`给B页面。

1. **属性传值**  
一般来说，属性传值就比较常见了，不过，属性传值只能正向传值。应用场景：A页面跳转到B页面。首先是B页面代码。  
`BViewController.h`中：  
```objc
@property(nonatomic) NSString *flag; 
```  
`AViewController.m`中：  
```objc
- (void)sendInfo:(NSString *)flag {
    BViewController *BVC = [[BViewController alloc] init];
    BVC.flag = flag;
    [self presentViewController:BVC animated:YES completion:nil];
}
```  
这样就通过构建BViewController实例的时候将flag的值传过去了。不过值得注意的是，这种构造实例然后通过属性传值的方法应用的场景很单一。  
2.  **通知中心传值**  
通知中心传值使用情况相对比较复杂。通常是一个传给多个，应用场景：B、C页面监听A页面`flag`的值（A页面传值给B、C）。  在B、C中代码处理方式一样。  
```objc
- (id)init {
    if (self = [super init]) {
        [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(setFlag:) name:@"transFlag" object:nil];
    }
    return self;
}
```  
接受到通知后B、C的处理方法。
```objc
- (void)setFlag:(Notification *)Noti {
    NSDictionary *dict = [Noti userInfo];
    NSString *flag = [dict valueForKey:@"Info"];
    //获取flag数据。
}
```  
值得注意的是，Observer之所以放在init方法里面，可以为多个继承于此的页面提供初始化构造Observer的方法。通过这个方式扩展可以完成全局颜色切换，在后面的文章中我会单独研究一下。  
再看A页面这边传值。
```objc
@property(nonatomic) NSString *flag; 
```  
```objc
- (void)viewWillDisappear:(BOOL)animated {
    NSDictionary *dict = [NSDictionary dictionaryWithObject:self.flag forKey:@"Info"];
    [[NSNotificationCenter  defaultCenter] postNotificationName:@"transFlag" object:nil userInfo:dict];
}
```  
在A界面消失的时候会由通知中心传播dict内部的数据给所有的观察者，flag映射键值“Info”放置在dict中即可传过去。  
3. **代理传值**  

4. **单例传值**    
单例方法，在整个App的生命周期内只会初始化一次，但是会一直存在，持续占有机器内存，可以正向传值和反向传值，但是过多的使用大量占有内存。  
新建一个继承自`NSObject`的类：  
![](/images/2018-05-28-19-18-41.jpg)   
在`AppTransFlag.h`中声明一个属性和一个类方法：  
```objc
@interface AppTransFlag : NSObject
{
    NSString *_contextStr;
}
@property(nonatomic, retain) NSString *contextStr;
+(AppTransFlag *)shareInstance;
@end
```  
在`AppTransFlag.m`中实现类方法：  
```objc
#import "AppTransFlag.h"
@implementation AppTransFlag
@synthesize contextStr = _contextStr;
static AppStatus *_instance = nil;
+(AppTransFlag *)shareInstance {
    if (_instance == nil) {
        _instance = [[super alloc] init];
    }
    return _instance;
}
```  
在`AViewController.m`中：  
```objc
[ApptransFlag shareInstance].contextStr = self.flag;
```  
在`BVIewController.m`中，获取到flag的值：  
```objc
if ([AppTransFlag shareInstance].contextStr) {
    self.flag = [AppTransFlag shareInstance].contextStr;
}
```
这样就可以通过单例的属性值，将flag从A页面传到B页面。
1. **block传值**  
虽然有相似之处，但是block传值有别于属性传值，首先block传值不能跨页面传值，其次block传值适用于正向传值和逆向传值，使用起来还是很方便的。  
这里要将A页面的`flag`传给B，我们需要在A中构建block。  
在`AViewController.h`中，声明block：  
```objc
typedef void(^TransBlock)(NSString *data);
...
@property (copy, nonatomic) TransBlock choseBlock;
```
在`AViewControlle`